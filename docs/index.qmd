---
title: "Introdução à Programação"
author: "Thiago Pires"
title-slide-attributes:
  data-background-image: cover.gif
  data-background-position: cover
format: 
  revealjs:
    theme: theme.scss
    width: 1600
    height: 900
    footer: "[github.com/unasp-aulas/intro-program](https://github.com/unasp-aulas/intro-program)"
    mermaid-format: png
html-math-method: mathjax
code-annotations: hover
ipynb-shell-interactivity: all
execute: 
  echo: true
filters: 
  - shinylive
---

# Desenvolvimento de algoritmos para solução de problemas

> *Em matemática e ciência da computação, um algoritmo é uma <mark>sequência finita de ações executáveis que visam obter uma solução</mark> para um determinado tipo de problema.* 

\ -- [pt.wikipedia.org/wiki/Algoritmo](https://pt.wikipedia.org/wiki/Algoritmo)

## Algoritmo

\

O conceito de [algoritmo]{.blue} é frequentemente <mark>ilustrado pelo exemplo de uma receita culinária</mark>, embora muitos algoritmos sejam mais complexos. Eles podem repetir passos (fazer [iterações]{.blue}) ou necessitar de [decisões]{.blue} (tais como comparações ou lógica) até que a tarefa seja completada.

\

Um algoritmo <mark>não representa, necessariamente, um programa de computador,</mark> e sim os passos necessários para realizar uma tarefa.


## Etapas para construção de um programa

\

[1. Definição do problema]{.fragment}

[2. Projetar a solução (algorítmo)]{.fragment}

[3. Codificar a solução (programar em uma linguagem)]{.fragment}

[4. Testar o programa]{.fragment}


## Etapas para construção de um programa

\

:::: columns
::: {.column .fragment}
1. Qual é o próximo número da sequência: 

$$1, 1, 2, 3, 5, 8, 13,\dots$$

2.

$$
\begin{align}
F(n)=F(n-1)+F(n-2), \\
\text{com}\; n \geq 1\;\text{e}\; F(1) = F(2) = 1
\end{align}
$$
:::
::: {.column .fragment}
3.

```{python}
def fibonacci_de(n):
    if n in {1, 2}:
        return 1
    return fibonacci_de(n - 1) + fibonacci_de(n - 2)
```

4.

```{python}
[fibonacci_de(n) for n in range(1, 9)]
```
:::
::::

# Introdução ao Python

## Instalação

\

::: {.panel-tabset}

### Instalar o Python:
1. Abra a Microsoft Store no seu computador.
2. Na barra de pesquisa, digite Python.
3. Selecione a versão desejada do Python (geralmente, a mais recente).
4. Clique em Obter e aguarde a instalação ser concluída.
5. Após a instalação, o Python estará disponível no seu sistema, e você pode verificar digitando `python --version` no terminal.

### Instalar o VSCode:
1. Abra a Microsoft Store.
2. Na barra de pesquisa, digite Visual Studio Code.
3. Selecione o Visual Studio Code da Microsoft.
4. Clique em Obter e aguarde a instalação ser concluída.
5. Após a instalação, o VSCode estará disponível no seu sistema e pode ser aberto através do menu Iniciar.

:::

Depois de instalar ambos, você pode usar o VSCode para escrever e rodar código Python diretamente.

## Google Colab

\

Acesso em <https://research.google.com/colaboratory/>

## `pip` um gerenciador de pacotes

\

```
# Instalar 1 ou + pacotes
pip install pandas folium

# Instalar um conjunto de pacotes a partir do arquivo requirements.txt
pip install -r requirements.txt

# Listar todos os pacotes instalados
pip freeze
```

## Módulos

\

Para utlizar as funções de outros pacotes é necessário carregar os módulos com `import`:

```{python}
#| output-location: column
import re

txt = "unasp fica no estado de sp"
x = re.findall("sp", txt); x
```

\

```{python}
#| output-location: column
import re as regex

txt = "unasp fica no estado de sp"
x = regex.findall("sp", txt); x
```

\

```{python}
#| output-location: column
from re import findall

txt = "unasp fica no estado de sp"
x = findall("sp", txt); x
```

## Aritmética

\

:::: columns
::: {.column}
Cálculos simples $\frac{((5 + 3) \times 7)}{5}$

```{python}
(5 + 3) * 7/5
```

\

Potência $10^2$

```{python}
10**2
```
:::
::: {.column}
Raiz quadrada $\sqrt{100}$

```{python}
from math import sqrt
sqrt(100)
```

\

Derivada $f'(x) = \text{cos}(x)$

```{python}
from sympy import *
x = symbols('x')
diff(cos(x), x)
```
:::
::::

# Variáveis e entrada de dados

> *Em programação, variáveis são utilizadas para armazenar valores. Então `x = 1`, a variável `x` armazena o valor 1*

## Nomes de variáveis

\

### Nomes aceitos

- `a1`
- `velocidade`
- `velocidade90`
- `salário_médio`
- `_b`

### Nomes não aceitos

- `salário médio` (utilizando espaço)
- `1a` (começando com números)

## Variáveis numéricas

\

:::: columns
::: {.column}
### Números inteiros

```{python}
a = 1_000
b = 2
c = -5
```

\

### Números de ponto flutuante ou decimais

```{python}
d = 1.0
e = 5.478
g = 3000.67
```
:::
::: {.column}
### Verificando o tipo com a função `type`

```{python}
type(a)
```

```{python}
type(d)
```
:::
::::

## Variáveis do tipo lógico

```{python}
resultado = True
aprovado = False
```

\

### Operadores relacionais

```{python}
#| output-location: column
# Variáveis
a = 2 # <1>
b = 5 # <1>
c = 5 # <1>
# Operadores relacionais
b > a # <2>
a < b # <3>
c <= b # <4>
c == b # <5>
a != b # <6>
```
1. Variáveis `a`, `b` e `c`
2. `b` maior do que `a`
3. `a` menor do que `b`
4. `c` é menor ou igual a `b`
5. `c` é igual a `b`
6. `a` é diferente de `b`

Verificando o tipo

```{python}
type(resultado)
```

## Operadores lógicos

\

```{python}
#| output-location: column
not True
not False
True and True
True and False
False and True
False and False
True or True
True or False
False or True
False or False
```
Expressões lógicas

```{python}
True or False and not True
```

## Variáveis string

> *Variáveis do tipo [string]{.blue} armazenam cadeias de caracteres como nomes e textos em geral.*

\

```{python}
s = "texto"
type(s)
```

O tamanho de uma string pode ser obtido utilizando-se a função `len`:

```{python}
len(s)
```

## Operações com strings

\

### Concatenação

```{python}
#| output-location: column
s = "ABC"
s + "D"
```

```{python}
#| output-location: column
"#" + 20 * "-" + "#"
```

\

### Composição

```{python}
"%s tem %d anos e R$%.2f" % ("João", 40, 50.453)
```

```{python}
"{} tem {} anos e R${:.2f}".format("João", 40, 50.453)
```

```{python}
nome, idade, dinheiro = "João", 40, 50.453
f"{nome} tem {idade} anos e R${dinheiro:.2f}"
```

## Entrada de dados

\

A função `input` é utilizada para solicitar dados do usuário. Ela recebe um parâmetro, que é a mensagem a ser exibida, e retorna o valor digitado pelo usuário.

```{.python}
x = input("Digite um número: ")
print(x)
```

\

Produzindo a seguinte saída na tela:

```
Digite um número: 5
5
```

## Exercícios

\

Faça um programa que calcule o aumento de um salário. Ele deve solicitar o valor do salário e a porcentagem do aumento. Exiba o valor do salário, percentual de aumento e do novo salário.

```{.python}
# Inputs
salario = float(input("Digite seu salário: ")) # <1>
percentual = float(input("Digite o percentual de aumento: ")) # <1>

# Cálculo
novo_salario = salario * (1 + percentual/100) # <2>

# Resultado
print(f"O meu salário é R${salario:.2f}, o percentual de aumento foi {percentual:.1f}% e o novo salário será de R${novo_salario:.2f}") # <3>
```

1. Definir os inputs, lembrar que se está lidando com números utilizar `float`
2. Cálculo do novo salário
3. Resultado compondo com as variáveis e cálculos anteriores

# Condições

> *As condições servem para selecionar quando uma parte do programa deve ser ativada e quando deve ser simplesmente ignorada*

## Condições

\

### `if`

```python
if <condição>:
  bloco verdadeiro
```

### `else`

```python
if <condição>:
  bloco verdadeiro
else:
  bloco alternativo
```

### `elif`

Inserindo mais condições

```python
if <condição>:
  bloco verdadeiro
elif <condição>:
  bloco verdadeiro para esta condição
```

## Exercício

\

Faça um programa que calcule o aumento de um salário. Ele deve solicitar o valor do salário e o nível do cargo. Cargo junior terá um aumento de 10%, pleno de 20% e senior 30%. Mostre uma saída com o salário, o cargo e o novo salário.


```{.python}
salario = float(input("Digite seu salário: "))
cargo = input("Digite o nível do cargo: ")
if cargo == "junior": # <1>
  novo_salario = salario * 1.1 # <1>
elif cargo == "pleno":
  novo_salario = salario * 1.2
elif cargo == "senior":
  novo_salario = salario * 1.3 
else:
  print("Cargo não identificado!")

print(f"O meu salário é R${salario:.2f}, mas com o meu cargo {cargo}, o novo salário será de R${novo_salario:.2f}")
```

1. Se o cargo é junior o salário é multiplicado por 1 + 0,1 (10%)

## Exercício

\

O exercício anterior considerando que se o profissional no cargo senior tiver filho o salário terá um acréscimo de R$ 500

```{.python}
salario = float(input("Digite seu salário: "))
cargo = input("Digite o nível do cargo: ")
if cargo == "junior":
  novo_salario = salario * 1.1
elif cargo == "pleno":
  novo_salario = salario * 1.2
elif cargo == "senior":
  novo_salario = salario * 1.3
  filhos = input("Você tem filhos? ")
  if filhos == "sim": # <1>
    novo_salario += 500 # <1>
else:
  print("Cargo não identificado!")

print(f"O meu salário é R${salario:.2f}, mas com o meu cargo {cargo}, o novo salário será de R${novo_salario:.2f}")
```

1. `if` aninhado

## Operação ternária

Seria uma forma mais simplificada de utilizar condições.

\

```{python}
x = 54
"Maior do que 50" if x > 50 else "Menor ou igual a 50"
```

## Match case

Seria uma outra forma de aplicar condições no código. Nós reescreveremos o problema do aumento de salário.

\

```{.python}
salario = float(input("Digite seu salário: "))
cargo = input("Digite o nível do cargo: ")
match cargo:
  case "junior":
    novo_salario = salario * 1.1
  case "pleno":
    novo_salario = salario * 1.2
  case "senior":
    novo_salario = salario * 1.3 
  case _:
    print("Cargo não identificado!")
    novo_salario = None

if novo_salario is not None:
  print(f"O meu salário é R${salario:.2f}, mas com o meu cargo {cargo}, o novo salário será de R${novo_salario:.2f}")
```

# Repetições

> *São utilizadas para executar a mesma parte de um programa várias vezes*

## Repetições

\

### `while`

```python
while <condição>:
  bloco
```

\

Imprimir números de 1 a 5

```{.python}
x = 1 # <1>
while x <= 5: # <2>
  print(x) # <3>
  x += 1 # <3>
```

1. Inicializa com o número 1
2. Combina a estrutura condicional com a estrutura de repetição
3. Repete estas linhas enquanto a condição for verdadeira

## Enquanto não sair, continuar repetindo a pergunta

\

### `while`

```{.python}
exit = False
while not exit:

    exit = input("Você quer sair? ")
    if exit == "Sim":
        exit = True
        print("Bye!")
    else:
        exit = False
```

## Exercício

\

Construa um programa que solicite para qual número deve ser calculada a tabuada de multiplicação

```{.python}
n = int(input("Tabuada de: "))
x = 0
while x <= 10:
    print(f"{n} {chr(215)} {x} = {n * x}") # <1>
    x = x + 1
```

1. A função `chr` mostra um caractere unicode

## Repetições

\

### Acumuladores com `while`

Programa para calcular a soma de 10 números inseridos

```{.python}
n = 1
soma = 0
while n <= 10:
  x = int(input(f"Digite o {n} número: "))
  soma += x # <1>
  n += 1
print(f"Soma: {soma}")
```

1. Variável acumuladora

## Repetições

\

### Acumuladores com `while`

Programa para calcular a média de 10 números inseridos

```{.python}
n = 1
soma = 0
while n <= 10:
  x = int(input(f"Digite o {n} número: "))
  soma += x # <1>
  n += 1
print(f"Média: {soma/10:.1f}")
```

## Operadores de atribuição especial

\

Equivalências:

- `x += 1` $\Longleftrightarrow$ `x = x + 1` 
- `y -= 1` $\Longleftrightarrow$ `y = y - 1` 
- `c *= 1` $\Longleftrightarrow$ `c = c * 2` 
- `d /= 1` $\Longleftrightarrow$ `d = d / 1` 
- `e **= 1` $\Longleftrightarrow$ `e = e ** 1` 
- `f //= 1` $\Longleftrightarrow$ `f = f // 1` 

## Repetições

\

### Interrompendo a repetição `while`

```{.python}
s = 0
while True:
  v = int(input("Digite um número a somar ou 0 para sair: "))
  if v == 0:
    break # <1>
  s += v
print(s)
```

1. Instrução utilizada para interromper a execução de `while`

Para continuar uma repetição existe a instrução `continue`

## Repetições

\

### Barra de progresso `while`

```{.python}
import os 
import time

print("\033[?25l", end="") # <1>
x = 1    
tamanho, _ = os.get_terminal_size() # <2>
tamanho = tamanho - 5
while x <= tamanho - 5:
    bar = chr(9608) * x + f" {x * 100 / tamanho:.0f}"
    print(bar)
    time.sleep(.1) # <3>
    os.system('cls') # <4>
    x = x + 1
```

1. Apagar cursor
2. Esta função pega o tamanho da janela do terminal
3. O programa *dorme* por 0.1 seg
4. Limpar a tela (este comando não funciona no jupyter ou outro notebook)

\

```
███████████████████████████████████████████████████ 76%
```

## Símbolos Unicode

\

Como apresentando no último exemplo, no python, é possível incluir símbolos utilizando a função `chr`.

::: {.columns}
::: {.column}
```{python}
[(i, chr(i)) for i in [9608, 9816, 128187, 128665, 129315, 128099, 8721, 128375]]
```

Uma lista poderá ser encontrada aqui <https://symbl.cc/> com os símbolos e códigos. O código que deverá ser utilizado é a parte numérica do HTML (&#[128375]{.mark};)
:::
::: {.column}
![](images/unicode.png)
:::
:::

# Estrutura de dados

## Listas

\

A lista é representada por `[]`, seguem alguns exemplos:

```{python}
#| output-location: column
[1, 2, 3, 4] # <1>
["a", "b", "c"] # <2>
["a", 5, True] # <3>
[[1, "a"], [True, 2.6]] # <4>
```

1. Lista de inteiros
2. Lista de strings
3. Lista com tipos mesclados
4. Listas aninhadas

\

Podemos extrair elementos da lista utilizando `[]`:

```{python}
#| output-location: column
minha_lista = [4, 5, 8, 1, 9, 5]

minha_lista[0] # <1>
minha_lista[2] # <2>
minha_lista[-1] # <3>
minha_lista[3:5] # <4>
```

1. Extraindo o primeiro elemento da lista utilizando o índice `0`
2. Extraindo o terceiro elemento da lista utilizando o índice `2` 
3. Extraindo o último elemento da lista utilizando o índice `-1`
3. Extraindo os elementos de índice 3 a 4 `3:5`

## Listas

\

### Percorrendo uma lista com `while` e dar `print` de cada valor

```{python}
#| output-location: column
notas = [9, 5, 4, 3, 9, 2]

i = 0
while i < 6:
  print(notas[i])
  i = i + 1
```

\

Eu poderia substituir 6 por `len(notas)`


```{python}
#| output-location: column
notas = [9, 5, 4, 3, 9, 2]

i = 0
while i < len(notas):
  print(notas[i])
  i = i + 1
```

## Listas

\

### Utilizando `for`

Temos a opção de utilizar `for` para percorrer uma lista e dar `print` de cada valor

```{python}
#| output-location: column
notas = [9, 5, 4, 3, 9, 2]

for i in notas:
  print(i)
```

## Cópia de lista e substituição por um determinado valor

\

```{python}
#| output-location: column
L = ["a", "b", "c", "d", "e"]
K = L # <1>
L[3] = "r" # <2>
print(K) # <3>
```

1. Cópia a lista `L` e salvo na variável `K`
2. Substituição do elemento "d" pelo elemento "r"
3. Como `K` é cópia de `L`, qualquer alteração em `L` produz uma alteração em `K`

Uma outra forma de cópia seria utilizando o comando `[:]`

```{python}
#| output-location: column
L = ["a", "b", "c", "d", "e"]
K = L[:] # <1>
L[3] = "r" # <2>
print(K) # <3>
```

1. Esta forma de cópia inpede que `K` receba alterações se `L` for alterado.
2. Substituição do elemento "d" pelo elemento "r"

## Métodos

Métodos são semanticamente o mesmo que funções, mas há duas diferenças sintáticas: Os métodos são definidos dentro de uma definição de classe. Dois métodos para inserir novos dados em uma lista são:

- `append` insere um elemento em uma lista
- `extend` insere vários elementos em uma lista

```{python}
#| output-location: column
L = ["a", "b", "c", "d", "e"]
L.append("f")
print(L)
```

```{python}
#| output-location: column
L = ["a", "b", "c", "d", "e"]
L.extend(["f", "g", "h"])
print(L)
```
Se utilizar `append` para inserir multiplos itens ele será inserido como um único item

```{python}
#| output-location: column
L = ["a", "b", "c", "d", "e"]
L.append(["f", "g", "h"])
print(L)
```

## Adicionar elementos em uma lista

\

Criar uma programa que adicione repetidamente números em uma lista, mas que ao digitar o número 0 o programa é interrompido

```{.python}
L = []
while True:
  n = int(input("Digite um número (0 para sair): "))
  if n == 0:
    break
  L.append(n)
print(f"Esta é a minha lista: {L}")
```

## Quantas letras tem em uma lista

\

Criar uma programa que verifique quantas letras "a" aparecem na lista

```{python}
soma = 0
for i in ["a", "b", "a", "f"]:
  if i == "a":
    soma += 1
print(soma)
```

## Qual é o máximo desta lista

\

Crie um programa que calcule o valor máximo de uma lista

```{python}
L = [1, 7, 4, 5, 2]

maximo = L[0]
for i in L:
  if i > maximo:
    maximo = i
print(f"O número máximo é o: {maximo}")
```

## Digite um texto e qual letra gostaria de contar

\

Criar uma programa que solicite uma frase e a letra que gostaria que fosse contada
```{.python}
from unidecode import unidecode

texto = input("Digite uma frase: ")
letra = input("Qual letra gostaria de contar: ")

soma = 0
for i in texto:
  if unidecode(i.lower()) == letra:
    soma += 1
print(f"A quantidade de '{letra}' nesta frase é de: {soma}")
```

\

- Para remover acentos foi utilizado o `unidecode`
- Para instalar `pip3 install unidecode`

## Dicionário

\

O dicionário é definido por `{}` e estruturado sempre com uma chave `'a' ` e um valor `1`, sendo separados por "`:`"
```{python}
x = {'a': 1, 'b': 2}
```

\

Para obter um valor podemos usar `[]` com uma chave `x['a']` para poder retornar o valor associado a chave

```{python}
x["a"]
```

O dicionário tem dois métodos utilizados para retornar uma lista de chaves e valores

```{python}
x.keys()
x.values()
```

## Dicionário

\

Para adicionar uma nova chave e valor

```{python}
x["c"] = 3
x
```

\

É possível adicionar outras estruturas de dados como valores no dicionário

```{python}
x["d"] = ["f", "g", "h"]
x
```


## Dicionário

\

### Caixa de supermercado

```{.python}
tabela = {"Alface": 5.00,
          "Batata": 4.55,
          "Tomate": 9.80,
          "Feijão": 7.30}
valor_total = 0 # <1>
while True:
    produto = input("Qual o produto? ").capitalize() # <2>
   
    if produto == "Sair": # <3>
        print("Bye!") # <3>
        break # <3>
       
    quantidade = int(input("Quantidade: ")) # <4>
    valor_produto = tabela[produto] * quantidade # <5>
    valor_total = valor_total + valor_produto # <6>
print(f"Valor total das compras foi de: R${valor_total:.2f}")
```

1. Inicializando o valor total
2. Solicitando o nome do produto
3. Se escrever "Sair" o programa é interrompido
4. Solicitando a quantidade
5. Computando o valor do produto baseado na quantidade
6. Valor total das compras

## Dicionário 

\

### Contagem de letras

```{python}
d = {}
for letra in "abracadabra":
  d[letra] = d.get(letra, 0) + 1
print(d)
```

## Dicionário 

\

### Contagem de letras

```{python}
#| output-location: column
import pprint

d = {}
for letra in "abracadabra":
  d[letra] = d.get(letra, 0) + 1

for letra in d.keys():
    d[letra] = d[letra] * chr(9608)

pp = pprint.PrettyPrinter(width=1)
pp.pprint(d)
```

## Tupla

\

As tuplas são similares às listas, mas com a diferença de serem imutáveis, ou seja, não é possível substituir um elemento. 

```{python}
x = (1, 2, 3, 4) # <1>
x[2] # <2>
```

1. Na tupla os valores são definidos por parenteses
2. Da mesma forma que a lista, os valores poderão ser extraídos pelo seu índice

\

Contudo podemos concatenar tuplas

```{python}
(1, 2, 3) + (4, 5)
```

\

Um tupla com somente um elemento deve ser incluída a `,`

```{python}
(4,)
```

## Conjunto

\

Os conjuntos trazem a mesma ideia dos conjuntos da matemática. Um detalhe importante é se elementos repetidos forem incluidos eles são removidos automaticamente.

```{python}
x = {1, 2, 3, 4, 4, 2, 1}
x
```

\

Para adicionar um elemento

```{python}
x.add(5)
x
```

## Conjunto

\

### União entre conjuntos

```{python}
#| output-location: column
A = {1, 2, 3}
B = {4, 5, 6}
A | B
```

\

### Interseção entre conjuntos

```{python}
#| output-location: column
A = {1, 2, 3}
B = {3, 4, 5}
A & B
```

\

### Diferença entre conjuntos

```{python}
#| output-location: column
A = {1, 2, 3}
B = {2, 3, 4, 5}
B - A
```

# Funções

## Funções

\

Uma função em python é iniciada com `def`, deve se incluir um `nome_função`, incluir `argumento` e uma declaração `return` para retornar o resultado

```{python}
def nome_função(argumento):
  return argumento + 5
```

\

Para utilizar a função

```{python}
nome_função(10)
```

## Funções

\

Função para verificar se o número é par

```{python}
def ehpar(num):
  return num % 2 == 0
```

```{python}
#| output-location: column
ehpar(9)
ehpar(4)
```

\

Função para dizer se é par ou ímpar

```{python}
def par_ou_impar(num):
  if ehpar(num):
    return "par"
  else:
    return "ímpar"
```

```{python}
#| output-location: column
par_ou_impar(9)
par_ou_impar(4)
```

## Funções

\

Calcular a soma de elementos de uma lista

```{python}
def somar_lista(lista):
  soma = 0
  for e in lista:
    soma = soma + e
  return soma

somar_lista([1, 2, 3, 4])
```

Calcular a média de elementos de uma lista

```{python}
def media_lista(lista):
  soma = 0
  for e in lista:
    soma = soma + e
  return soma/len(lista)

media_lista([1, 2, 3, 4])
```

## Funções

\

### Variáveis locais e globais

```{python}
#| output-location: column
a = 'global'
def f():
  a = 'local'
  print(a)

f()
print(a)
```

\

```{python}
#| output-location: column
a = 'global'
def f():
  global a # <1>
  a = 'local'
  print(a)

f()
print(a)
```

1. Declarando a variável `a` como global, assim uma atribuição dentro da função afeta atribuições fora da função

## Funções

\

Criar uma função que retorna o aumento de salário. Os argumentos necessários para calcular este aumento de salário são o salário atual e o cargo que o profissional ocupa. Contudo se o cargo é junior o aumento será de de 10%, se for pleno o aumento será de 20% e se for senior o aumento será de 30%.


```{python}
def aumento_salario(salario, cargo):
  if cargo == "junior":
    return salario * 1.1
  elif cargo == "pleno":
    return salario * 1.2
  elif cargo == "senior":
    return salario * 1.3
  else:
    return "Cargo não identificado"
```

Aplicação da função

```{python}
aumento_salario(1100, "pleno")
```

## Funções

\

### Jogo da Velha

```{python}
def tic_tac_toe():
    
    data = {}

    def move(data, pos):
        pos = data.get(pos, pos)
        if pos == 1:
            return chr(215)
        elif pos == 0:
            return chr(9711)
        else:
            return pos

    def show_board():
        print(f' {move(data, "1")} | {move(data, "2")} | {move(data, "3")} ')
        print("-" * 11)
        print(f' {move(data, "4")} | {move(data, "5")} | {move(data, "6")} ')
        print("-" * 11)
        print(f' {move(data, "7")} | {move(data, "8")} | {move(data, "9")} ')
        print("\n")

    def winner_checker():
        win_pos = ["123", "456", "789", "147", "258", "369", "159", "357"]
        win_checkers = [[data.get(i) for i in j] for j in win_pos]
        check = True in [(set(i) == {1}) | (set(i) == {0}) for i in win_checkers]
        return check

    while True:
        
        show_board()
        
        player1 = input(f"Select a position (player {chr(215)}): ")
        print("\n")
        
        data[player1] = 1

        if winner_checker():
          print(f"Player {chr(215)} Won!\n")
          show_board()
          break
        
        show_board()
        
        player2 = input(f"Select a position (player {chr(9711)}): ")
        print("\n")
        
        data[player2] = 0

        if winner_checker():
          print(f"Player {chr(9711)} Won!\n")
          show_board()
          break
```

# Exceções

## Exceções

\

Mesmo que um comando ou expressão estejam sintaticamente corretos, talvez ocorra um erro na hora de sua execução. Erros detectados durante a execução são chamados exceções

```{python}
#| error: true
print(y)
```

\

Podemos tratar as exceções utilizando o bloco `try/except`

```{python}
try:
  print(y)
except:
  print("Variável não foi definida")
```

## Exceções

\

É possível também concatenar um texto padrão com o texto de erro

```{python}
try:
  print(y)
except Exception as err:
  print(f"ERRO: {err}")
```

É possível também utilizar mais de uma exceção para direcionar diferentes tipos de erros

```{python}
#| eval: false
y = [1, 2, 3]
while True:
  try:
    i = int(input("Digite um número: "))
    print(y[i])
    break
  except IndexError as err:
    print("ERRO: ", err)
  except ValueError as err:
    print("ERRO: ", err)
```

## Exercício 

\

Escreva um programa que pergunte a distância que um passageiro deseja percorrer em km. Calcule o preço da passagem, cobrando R$ 0.50 por km para viagens de até 200 km, R$ 0.45 para viagens entre 200 e 400 km e para viagens mais longas será cobrado R$ 0.35 por km. O programa só deve ser encerrado quando o usuário escrever sair.


```{python}
# | eval: false
while True:
    dist = input("Digite a distância: ")
    try:
        if dist.capitalize() == "Sair":
            print("Bye!")
            break
        else:
            dist = float(dist)

        if dist <= 200:
            preco = dist * 0.5
        elif (dist > 200) & (dist <= 400):
            preco = dist * 0.45
        elif dist > 400:
            preco = dist * 0.35
        print(f"O preço ficou em R${preco:.2f}")
        
    except:
        print("Valor inválido")
```

# Git/Github

> [Git é um sistema de controle de versão]{.mark} que ajuda a gerenciar e acompanhar mudanças no seu código, enquanto o [GitHub é uma plataforma online onde você pode hospedar seus repositórios Git]{.mark}, colaborar com outros desenvolvedores e compartilhar seus projetos de forma fácil e segura. Ambos são ferramentas essenciais para quem trabalha com desenvolvimento de software!

## Git

```{mermaid}
%%| echo: false
graph LR
    A["Iniciar um repositório <br> (git init)"] --> C["Fazer alterações"]
    B["Clonar repositório <br> (git clone)"] --> C
    C --> D["Adicionar mudanças ao staging <br> (git add)"]
    D --> E["Commit das mudanças <br> (git commit -m 'Mensagem de commit')"]
    E --> F["Enviar para o repositório remoto <br> (git push)"]
    F --> G["Atualizar local com pull <br> (git pull)"]
```

- Iniciar um repositório: Criar um novo repositório Git localmente.
- Clonar repositório: Fazer uma cópia de um repositório remoto para o seu computador.
- Adicionar mudanças ao staging: Preparar as alterações para serem commitadas, colocando-as na área de staging.
- Commit das mudanças: Salvar as alterações no histórico do repositório
- Enviar para o repositório remoto: Subir as mudanças locais para o repositório remoto na internet.
- Atualizar local: Trazer as últimas mudanças do repositório remoto para o seu repositório local.

## Mensagens semânticas de commit^[<https://gist.github.com/joshbuchea/6f47e86d2510bce28f8e7f42ae84c716#file-semantic-commit-messages-md>]

\

> O commit semântico é uma prática de escrever mensagens de commit de forma clara e padronizada, usando um formato que indica o tipo de mudança feita (como correção, adição ou remoção) e uma descrição breve.

### Exemplo

```
feat: add hat wobble
^--^  ^------------^
|     |
|     +-> Resumo no tempo presente.
|
+-------> Tipo: chore (tarefas), docs (documentação), feat (recurso), fix (correção), refactor (refatoração), style (estilo), ou test (teste).
```

## Mensagens semânticas de commit^[<https://gist.github.com/joshbuchea/6f47e86d2510bce28f8e7f42ae84c716#file-semantic-commit-messages-md>]

\

- `feat`: (new feature for the user, not a new feature for build script)
- `fix`: (bug fix for the user, not a fix to a build script)
- `docs`: (changes to the documentation)
- `style`: (formatting, missing semi colons, etc; no production code change)
- `refactor`: (refactoring production code, eg. renaming a variable)
- `test`: (adding missing tests, refactoring tests; no production code change)
- `chore`: (updating grunt tasks etc; no production code change)

# Olimpiada Brasileira de Informática
<https://olimpiada.ic.unicamp.br/>

## Torneio de tênis^[<https://olimpiada.ic.unicamp.br/pratique/ps/2021/f1/torneio/>]

\

```{.python}
i = 0
vitoria = 0
while i < 6:
  jogo = input()
  if jogo == "V":
    vitoria += 1
  i += 1
if vitoria >= 5:
  print(1)
elif vitoria in [3, 4]:
  print(2)
elif vitoria in [1, 2]:
  print(3)
else:
  print(-1)
```

## Baralho^[<https://olimpiada.ic.unicamp.br/pratique/ps/2021/f1/baralho/>]

\

```{.python}
C = []
E = []
U = []
P = []
c = 13
e = 13
u = 13
p = 13
cartas = input()
for i in range(0, len(cartas), 3):
  carta = cartas[i:i + 3]
  if carta[-1] == "C":
    if carta not in C and c != "erro":
      C.append(carta)
      c -= 1
    else:
      c = "erro"
  elif carta[-1] == "E":
    if carta not in E and e != "erro":
      E.append(carta)
      e -= 1
    else:
      e = "erro"
  elif carta[-1] == "U":
    if carta not in U and u != "erro":
      U.append(carta)
      u -= 1
    else:
      u = "erro"
  elif carta[-1] == "P":
    if carta not in P and p != "erro":
      P.append(carta)
      p -= 1
    else:
      p = "erro"

print(c)
print(e)
print(u)
print(p)
```

## Duplas de tênis^[<https://olimpiada.ic.unicamp.br/pratique/ps/2021/f2/tenis/>]

\

```{.python}
entrada = []
dupla_a = []
dupla_b = []
diffs = []
for i in range(0, 4):
  entrada.append(int(input()))

for i, j in enumerate(entrada):
  for k, l in enumerate(entrada):
    if i > k:
      dupla_a.append(j + l)
      dupla_b.append(sum([entrada[s] for s in list(set(range(4)) - set([i, k]))]))
diffs = [abs(i[0] - i[1]) for i in zip(dupla_a, dupla_b)]
print(min(diffs))
```

# Aplicação Web

## Shiny^[<https://shiny.posit.co/py/>]

<center>
[![](images/shiny.png)](https://shiny.posit.co/py/)
</center>

## Exemplos

\

```{shinylive-python}
#| standalone: true
#| components: [editor, viewer]

from shiny import *

app_ui = ui.page_fluid(
    ui.input_slider("n", "N", 0, 100, 40),
    ui.output_text_verbatim("txt"),
)

def server(input, output, session):
    @output
    @render.text
    def txt():
        return f"The value of n*2 is {input.n() * 2}"

app = App(app_ui, server)
```

## Exemplos
### Button

\

```{shinylive-python}
#| standalone: true
#| components: [editor, viewer]

from shiny import reactive, render
from shiny.express import input, ui

ui.input_action_button("action_button", "Action")  

@render.text()
def counter():
    return f"{input.action_button()}"
```

## Exemplos
### Checkbox

\

```{shinylive-python}
#| standalone: true
#| components: [editor, viewer]

from shiny.express import input, render, ui

ui.input_checkbox_group(  
    "checkbox_group",  
    "Checkbox group",  
    {  
        "a": "A",  
        "b": "B",  
        "c": "C",  
    },  
)  

@render.text
def value():
    return ", ".join(input.checkbox_group())
```

## Exemplos
### Date

\

```{shinylive-python}
#| standalone: true
#| components: [editor, viewer]

from shiny.express import input, render, ui

ui.input_date("date", "Date")  

@render.text
def value():
    return input.date()
```

## Exemplos
### Sidebar layout

\

```{shinylive-python}
#| standalone: true
#| components: [editor, viewer]

from shiny.express import ui

with ui.sidebar(bg="#f8f8f8"):  
    "Sidebar"  

"Main content"  
```


## Exemplos

\

```{shinylive-python}
#| standalone: true
#| components: [editor, viewer]

from shiny.express import ui, input, render

with ui.sidebar(bg="#f8f8f8"):
    ui.input_select(
        "select",
        "Select",
        {
            "Olá": "Olá",
            "Hello": "Hello",
            "Hallo": "Hallo",
        },
    )

    ui.input_text("text", "Text input", "Enter name...")


@render.text
def value():
    return f"{input.select()} {input.text()}!"
```

\

Para executar localmente

```{.bash}
shiny run --launch-browser app.py
```
